import flet as ft
import json
import random
import functools
import os

# üîπ –ü–µ—Ä–µ–º—ñ—Å—Ç–∏–º–æ categories —É –≥–ª–æ–±–∞–ª—å–Ω—É –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ
categories = {
    "–†–æ–∑—Ç—è–∂–∫–∞": [
        ("–†–æ–∑—Ç—è–∂–∫–∞ –¥–ª—è —Å–ø–∏–Ω–∏ —Ö–≤–∏–ª–∏–Ω", 15),
        ("–†–æ–∑—Ç—è–∂–∫–∞ –Ω—ñ–≥ —Ö–≤–∏–ª–∏–Ω", 15),
        ("–ô–æ–≥–∞ —Ö–≤–∏–ª–∏–Ω", 20),
        ("–†–æ–∑—Ç—è–∂–∫–∞ —Ä—É–∫ —Ö–≤–∏–ª–∏–Ω", 15),
        ("–†–æ–∑—Ç—è–∂–∫–∞ —à–∏—ó —Ö–≤–∏–ª–∏–Ω", 10),
        ("–°–∏–ª–æ–≤–∞ —Ä–æ–∑—Ç—è–∂–∫–∞ —Ö–≤–∏–ª–∏–Ω", 20)
    ],
    "–°–∏–ª–∞": [
        ("–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", 10),
        ("–ü—Ä–µ—Å", 15),
        ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è", 10),
        ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è", 5),
        ("–ú–µ—Ä—Ç–≤–∞ —Ç—è–≥–∞", 10),
        ("–ñ–∏–º –ª–µ–∂–∞—á–∏", 10)
    ],
    "–ö–∞—Ä–¥—ñ–æ": [
        ("–ë—ñ–≥ —Ö–≤–∏–ª–∏–Ω", 30),
        ("–°—Ç—Ä–∏–±–∫–∏ –Ω–∞ –º—ñ—Å—Ü—ñ", 20),
        ("–°–∫–∞–∫–∞–ª–∫–∞", 30),
        ("–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä —Ö–≤–∏–ª–∏–Ω", 10),
        ("–ï–ª—ñ–ø—Ç–∏—á–Ω–∏–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä —Ö–≤–∏–ª–∏–Ω", 10),
        ("–ü–ª–∞–≤–∞–Ω–Ω—è —Ö–≤–∏–ª–∏–Ω", 10)
    ],
    "–ì–Ω—É—á–∫—ñ—Å—Ç—å": [
        ("–ü—ñ–ª–∞—Ç–µ—Å —Ö–≤–∏–ª–∏–Ω", 20),
        ("–ô–æ–≥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤ —Ö–≤–∏–ª–∏–Ω", 20),
        ("–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞ —Ö–≤–∏–ª–∏–Ω", 25),
        ("–ë–∞–ª–µ—Ç —Ö–≤–∏–ª–∏–Ω", 30),
        ("–°—Ç—Ä–µ—Ç—á–∏–Ω–≥", 20),
        ("–ì—ñ–º–Ω–∞—Å—Ç–∏–∫–∞ —Ö–≤–∏–ª–∏–Ω", 25)
    ],
    "–°–∏–ª–æ–≤–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å": [
        ("–ü–ª–∞–Ω–∫–∞ —Ö–≤–∏–ª–∏–Ω", 30),
        ("–¢—É—Ä–Ω—ñ–∫", 10),
        ("–ë—É—Ä–ø—ñ —Ö–≤–∏–ª–∏–Ω", 10),
        ("–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≥–∏—Ä–µ—é", 10),
        ("–ö—Ä–æ—Å—Å—Ñ—ñ—Ç", 20),
        ("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –≥–∏—Ä—è–º–∏", 15)
    ],
    "–†–µ—Å–ø—ñ—Ä–∞—Ç–æ—Ä–Ω–∞ —Å–∏—Å—Ç–µ–º–∞": [
        ("–î–∏—Ö–∞–ª—å–Ω—ñ –≤–ø—Ä–∞–≤–∏ —Ö–≤–∏–ª–∏–Ω", 5),  # —Ö–≤–∏–ª–∏–Ω
        ("–ë—ñ–≥ –Ω–∞ –≤–µ–ª–∏–∫—ñ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó —Ö–≤–∏–ª–∏–Ω", 10),
        ("–í–ø—Ä–∞–≤–∏ –¥–ª—è –ª–µ–≥–µ–Ω—å —Ö–≤–∏–ª–∏–Ω", 5),
        ("–ô–æ–≥–∞ –¥–∏—Ö–∞–Ω–Ω—è —Ö–≤–∏–ª–∏–Ω", 5),
        ("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω", 30)
    ],
    "–®–≤–∏–¥–∫—ñ—Å—Ç—å": [
        ("–°–ø—Ä–∏–Ω—Ç –Ω–∞ –º–µ—Ç—Ä—ñ–≤", 100),
        ("–ë—ñ–≥ –ø–æ —Å—Ö–æ–¥–∞—Ö", 5),
        ("–®–≤–∏–¥–∫—ñ —Å—Ç—Ä–∏–±–∫–∏ —Ö–≤–∏–ª–∏–Ω", 10),
        ("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω", 20),
        ("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é —Ö–≤–∏–ª–∏–Ω", 15)
    ],
    "–†–æ–±–æ—Ç–∞ –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞": [
        ("–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", 10),
        ("–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è", 10),
        ("–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è", 5),
        ("–í–∏–ø–∞–¥–∏", 10),
        ("–ü–ª–∞–Ω–∫–∞", 30),
        ("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –≤—Å—ñ –≥—Ä—É–ø–∏ –º'—è–∑—ñ–≤ —Ö–≤–∏–ª–∏–Ω", 20)
    ],
    "–ê–µ—Ä–æ–±–Ω—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è": [
        ("–í–µ–ª–æ—Å–∏–ø–µ–¥ —Ö–≤–∏–ª–∏–Ω", 40),
        ("–ë—ñ–≥ –Ω–∞ –¥–æ–≤–≥—ñ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó", 60),
        ("–ü–ª–∞–≤–∞–Ω–Ω—è —Ö–≤–∏–ª–∏–Ω", 50),
        ("–°—Ç—Ä–∏–±–∫–∏ –Ω–∞ —Å–∫–∞–∫–∞–ª—Ü—ñ", 30),
        ("–¢–∞–Ω—Ü—ñ —Ö–≤–∏–ª–∏–Ω", 45),
        ("–ö–∞—Ä–¥—ñ–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä–∏", 50)
    ],
    "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è": [
        ("TRX", 20),
        ("–ö—Ä–æ—Å—Å—Ñ—ñ—Ç", 25),
        ("–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ä—É—Ö–∏", 30),
        ("–ì—ñ–º–Ω–∞—Å—Ç–∏—á–Ω—ñ –≤–ø—Ä–∞–≤–∏", 20),
        ("–ö–æ–º–ø–ª–µ–∫—Å –≤–ø—Ä–∞–≤", 30)
    ],
    "–ë–∞–ª–∞–Ω—Å —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è": [
        ("–ë–∞–ª–∞–Ω—Å –Ω–∞ –æ–¥–Ω—ñ–π –Ω–æ–∑—ñ", 15),
        ("–ì—ñ–º–Ω–∞—Å—Ç–∏—á–Ω–∏–π –º'—è—á", 20),
        ("–ô–æ–≥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å", 25),
        ("–°–∫–∞–∫–∞–ª–∫–∞", 30),
        ("–õ–µ—Å—Ç–Ω–∏—á–Ω—ñ –≤–ø—Ä–∞–≤–∏", 20)
    ],
    "–†–µ–ª–∞–∫—Å–∞—Ü—ñ—è": [
        ("–ú–µ–¥–∏—Ç–∞—Ü—ñ—è —Ö–≤–∏–ª–∏–Ω", 10),  # —Ö–≤–∏–ª–∏–Ω
        ("–î–∏—Ö–∞–ª—å–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏", 10),
        ("–ô–æ–≥–∞ –¥–ª—è —Ä–æ–∑—Å–ª–∞–±–ª–µ–Ω–Ω—è —Ö–≤–∏–ª–∏–Ω", 15),
        ("–ü—Ä–æ–≥—É–ª—è–Ω–∫–∞ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ —Ö–≤–∏–ª–∏–Ω", 30),
        ("–†–æ–ª–ª—ñ–Ω–≥", 20)
    ]
}


# üîπ –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó user_data.json –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑ categories
def initialize_user_data():
    if not os.path.exists("user_data.json"):
        user_data = {"exercises": {}}
        for category, exercises in categories.items():
            user_data["exercises"][category] = {}  # –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —è–∫ –∫–ª—é—á
            for exercise, default_count in exercises:
                user_data["exercises"][category][exercise] = default_count  # –í–∫–ª–∞–¥–∞—î–º–æ –≤–ø—Ä–∞–≤—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é

        with open("user_data.json", "w", encoding="utf-8") as file:
            json.dump(user_data, file, ensure_ascii=False, indent=4)


# –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é, —â–æ–± user_data.json —Å—Ç–≤–æ—Ä–∏–≤—Å—è –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º
initialize_user_data()


# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —É user_data.json
def update_user_data(task, new_count):
    try:
        with open("user_data.json", "r", encoding="utf-8") as file:
            user_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {"exercises": {}}

    # –ü–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–ø—Ä–∞–≤–∏
    for category, exercises in categories.items():
        if task in [exercise[0] for exercise in exercises]:
            if category not in user_data["exercises"]:
                user_data["exercises"][category] = {}  # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ
            user_data["exercises"][category][task] = new_count  # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            break

    with open("user_data.json", "w", encoding="utf-8") as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)


# üîπ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å–ø–æ—Ä—Ç—É
def sport_page(page, back_to_main):
    category_checkboxes = [
        ft.Checkbox(
            label=category,
            value=False,
            label_style=ft.TextStyle(color="#C0C0C0"),  # –°–≤—ñ—Ç–ª—ñ—à–∏–π —Ç–µ–∫—Å—Ç
            on_change=lambda e, category=category: update_category_selection(e, category),
        )
        for category in categories.keys()
    ]

    task_output = ft.Column()
    completed_tasks = ft.Column()

    def selected_categories():
        return [checkbox.label for checkbox in category_checkboxes if checkbox.value]

    def update_category_selection(category):
        task_output.controls = [ft.Text(f"–í–∏–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}", color="#C0C0C0")]
        task_output.update()

    def generate_tasks(e):
        task_output.controls.clear()
        completed_tasks.controls.clear()
        completed_tasks.update()

        if not selected_categories():
            task_output.controls.append(ft.Text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é!", color="red"))
        else:
            selected_exercises = set()  # –ú–Ω–æ–∂–∏–Ω–∞ –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            available_exercises = []

            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –≤–ø—Ä–∞–≤–∏ –∑ –æ–±—Ä–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            for category in selected_categories():
                available_exercises.extend([(category, exercise, count) for exercise, count in categories[category]])

            # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            random.shuffle(available_exercises)

            # –í–∏–±–∏—Ä–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º 3 —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤–ø—Ä–∞–≤–∏
            while len(selected_exercises) < 3 and available_exercises:
                chosen_category, task_name, default_count = available_exercises.pop()

                if task_name not in selected_exercises:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
                    selected_exercises.add(task_name)

                    try:
                        with open("user_data.json", "r", encoding="utf-8") as file:
                            user_data = json.load(file)
                    except (FileNotFoundError, json.JSONDecodeError):
                        user_data = {"exercises": {}}

                    count = user_data["exercises"].get(chosen_category, {}).get(task_name, default_count)

                    task_row = ft.Row([
                        ft.Text(f"{task_name} ({chosen_category}) ‚Äì {count}", size=16, color="#D3D3D3"),
                        ft.ElevatedButton("–õ–µ–≥–∫–æ", on_click=functools.partial(rate_task, task_name, "–õ–µ–≥–∫–æ")),
                        ft.ElevatedButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ", on_click=functools.partial(rate_task, task_name, "–ù–æ—Ä–º–∞–ª—å–Ω–æ")),
                        ft.ElevatedButton("–°–∫–ª–∞–¥–Ω–æ", on_click=functools.partial(rate_task, task_name, "–°–∫–ª–∞–¥–Ω–æ")),
                    ])
                    task_output.controls.append(task_row)

        task_output.update()

    def rate_task(task, rating, e):
        try:
            with open("user_data.json", "r", encoding="utf-8") as file:
                user_data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            user_data = {"exercises": {}}

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ categories, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î –≤ user_data.json
        default_count = next(
            (count for exercises in categories.values() for name, count in exercises if name == task), 5
        )
        current_count = user_data["exercises"].get(task, default_count)

        if rating == "–°–∫–ª–∞–¥–Ω–æ":
            current_count = max(5, current_count - 5)  # –ú—ñ–Ω—ñ–º—É–º 5
        elif rating == "–õ–µ–≥–∫–æ":
            current_count += 5

        update_user_data(task, current_count)

        completed_tasks.controls.append(ft.Text(f"–í–∏–∫–æ–Ω–∞–Ω–æ: {task} - {rating} ({current_count} —Ä–∞–∑—ñ–≤)", color="green"))
        # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
        for row in task_output.controls[:]:  # –†–æ–±–∏–º–æ –∫–æ–ø—ñ—é —Å–ø–∏—Å–∫—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            if any(task in str(c) for c in row.controls):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
                task_output.controls.remove(row)
        task_output.update()
        completed_tasks.update()

    page.clean()
    page.add(
        ft.Column([
            ft.Text("üèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç", size=30, color="#FFA500", weight=ft.FontWeight.BOLD),
            *[ft.Row(category_checkboxes[i:i + 3]) for i in range(0, len(category_checkboxes), 3)],
            ft.ElevatedButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", on_click=generate_tasks),
            task_output,
            ft.Text("‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:", size=18, color="#C0C0C0", weight=ft.FontWeight.BOLD),
            completed_tasks,
            ft.ElevatedButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", on_click=lambda _: back_to_main()),
        ], spacing=20)
    )
