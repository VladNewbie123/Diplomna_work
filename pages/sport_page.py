import flet as ft
import random
import functools
from db import get_categories_with_exercises, get_user_count, update_user_count
from pages.user_details_page import update_characteristics

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –≤–ø—Ä–∞–≤–∞–º–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
categories = get_categories_with_exercises()

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
def sport_page(page: ft.Page, back_to_main, current_user_id):
    # –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–ø—Ä–∞–≤
    category_checkboxes = [
        ft.Checkbox(
            label=category,
            value=False,
            label_style=ft.TextStyle(color="#C0C0C0"),
            on_change=lambda e, category=category: update_category_selection(category),
        )
        for category in categories.keys()
    ]

    # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    task_output = ft.Column()
    # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    completed_tasks = ft.Column()

    # –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤–∏–±—Ä–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    def selected_categories():
        return [cb.label for cb in category_checkboxes if cb.value]

    # –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è/–≤—ñ–¥–ª–∞–¥–∫–∏)
    def update_category_selection(category):
        task_output.controls = [ft.Text(f"–í–∏–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}", color="#C0C0C0")]
        task_output.update()

    # –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä—É—î –¥–æ 3 –∑–∞–≤–¥–∞–Ω—å –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –≤–∏–±—Ä–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    def generate_tasks(e):
        task_output.controls.clear()
        completed_tasks.controls.clear()
        completed_tasks.update()

        # –Ø–∫—â–æ –Ω–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if not selected_categories():
            task_output.controls.append(
                ft.Text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é!", color="red")
            )
            task_output.update()
            return

        selected_exercises = set()
        available_exercises = []

        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–ø—Ä–∞–≤ —ñ–∑ –≤–∏–±—Ä–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        for category in selected_categories():
            for exercise_name, default_count in categories[category]:
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –¥–ª—è –≤–ø—Ä–∞–≤–∏
                count = get_user_count(current_user_id, category, exercise_name) or default_count
                available_exercises.append((category, exercise_name, count))

        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤
        random.shuffle(available_exercises)

        # –î–æ–¥–∞—î–º–æ –¥–æ 3 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤–ø—Ä–∞–≤
        while len(selected_exercises) < 3 and available_exercises:
            chosen_category, task_name, count = available_exercises.pop()
            if task_name not in selected_exercises:
                selected_exercises.add(task_name)

                # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑—ñ –≤–ø—Ä–∞–≤–æ—é —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
                task_row = ft.Row([
                    ft.Text(f"{task_name} ({chosen_category}) ‚Äì {count} —Ä–∞–∑—ñ–≤", size=16, color="#D3D3D3"),
                    ft.ElevatedButton("–õ–µ–≥–∫–æ", on_click=functools.partial(rate_task, task_name, "–õ–µ–≥–∫–æ")),
                    ft.ElevatedButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ", on_click=functools.partial(rate_task, task_name, "–ù–æ—Ä–º–∞–ª—å–Ω–æ")),
                    ft.ElevatedButton("–°–∫–ª–∞–¥–Ω–æ", on_click=functools.partial(rate_task, task_name, "–°–∫–ª–∞–¥–Ω–æ")),
                ])
                task_output.controls.append(task_row)

        task_output.update()
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å
        update_characteristics(current_user_id)

    # –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–ª—è—î –æ—Ü—ñ–Ω–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤–ø—Ä–∞–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    def rate_task(task_name, rating, e):
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏
        category = next(
            (cat for cat, exercises in categories.items() if any(name == task_name for name, _ in exercises)),
            None
        )
        if not category:
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å –¥–ª—è –≤–ø—Ä–∞–≤–∏
        current_count = get_user_count(current_user_id, category, task_name)
        if current_count is None:
            current_count = next((count for name, count in categories[category] if name == task_name), 5)

        # –ó–º—ñ–Ω—é—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ—Ü—ñ–Ω–∫–∏
        if rating == "–°–∫–ª–∞–¥–Ω–æ":
            current_count = max(5, current_count - 5)  # –ú—ñ–Ω—ñ–º—É–º 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
        elif rating == "–õ–µ–≥–∫–æ":
            current_count += 5
        # –Ø–∫—â–æ "–ù–æ—Ä–º–∞–ª—å–Ω–æ", –Ω–µ –∑–º—ñ–Ω—é—î–º–æ count

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        update_user_count(current_user_id, category, task_name, current_count)

        # –î–æ–¥–∞—î–º–æ –≤–ø—Ä–∞–≤—É –¥–æ —Å–ø–∏—Å–∫—É –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
        completed_tasks.controls.append(
            ft.Text(f"–í–∏–∫–æ–Ω–∞–Ω–æ: {task_name} - {rating} ({current_count} —Ä–∞–∑—ñ–≤)", color="green")
        )

        # –í–∏–¥–∞–ª—è—î–º–æ –≤–ø—Ä–∞–≤—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
        for row in task_output.controls[:]:
            if any(task_name in str(c) for c in row.controls):
                task_output.controls.remove(row)

        task_output.update()
        completed_tasks.update()

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    page.clean()
    page.add(
        ft.Column([
            ft.Text("üèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç", size=30, color="#FFA500", weight=ft.FontWeight.BOLD),  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            *[ft.Row(category_checkboxes[i:i + 3]) for i in range(0, len(category_checkboxes), 3)],  # –†—è–¥–∫–∏ –∑ —á–µ–∫–±–æ–∫—Å–∞–º–∏
            ft.ElevatedButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", on_click=generate_tasks),  # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            task_output,  # –í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
            ft.Text("‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:", size=18, color="#C0C0C0", weight=ft.FontWeight.BOLD),  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
            completed_tasks,  # –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
            ft.ElevatedButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", on_click=lambda _: back_to_main()),  # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        ], spacing=20)
    )
