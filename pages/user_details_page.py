import flet as ft
from db import load_user_data, save_user_data, get_user_progress, get_user_education, get_categories_with_exercises, \
    get_connection, get_category_to_stat_map


# üß† –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–∞ –¥–æ—Å–≤—ñ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –≤–ø—Ä–∞–≤ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
def update_characteristics(user_id):
    user_data = load_user_data(user_id)

    # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    total_strength = 0
    total_speed = 0
    total_endurance = 0
    total_balance = 0
    total_intelligence = 0

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    old_strength = user_data["strength"]
    old_speed = user_data["speed"]
    old_endurance = user_data["endurance"]
    old_balance = user_data["balance"]
    old_intelligence = user_data["intelligence"]

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–ø—Ä–∞–≤ —Ç–∞ –∫–∞—Ä—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    categories = get_categories_with_exercises()
    category_to_progress_type = get_category_to_stat_map()

    conn = get_connection()
    cursor = conn.cursor()

    # üîÅ –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –≤–ø—Ä–∞–≤–∏, —â–æ–± —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å
    for category, exercises in categories.items():
        for exercise_name, base_count in exercises:
            user_count, last_count = get_user_progress(user_id, category, exercise_name)

            delta = user_count - last_count
            if delta > 0:
                progress_type = category_to_progress_type.get(category)

                # –î–æ–¥–∞—î–º–æ –ø—Ä–∏—Ä—ñ—Å—Ç –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                if progress_type == "strength":
                    total_strength += delta
                elif progress_type == "speed":
                    total_speed += delta
                elif progress_type == "endurance":
                    total_endurance += delta
                elif progress_type == "intelligence":
                    total_intelligence += delta
                elif progress_type == "balance":
                    total_balance += delta

                # –û–Ω–æ–≤–ª—é—î–º–æ last_count —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                cursor.execute("""
                        UPDATE user_progress
                        SET last_count = %s
                        WHERE user_id = %s AND category = %s AND exercise_name = %s
                    """, (user_count, user_id, category, exercise_name))

    # üß† –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –æ—Å–≤—ñ—Ç–Ω—ñ –±–ª–æ–∫–∏, —è–∫—ñ —â–µ –Ω–µ –±—É–ª–∏ –≤—Ä–∞—Ö–æ–≤–∞–Ω—ñ
    cursor.execute("""
           SELECT id, quiz_block
           FROM user_education_progress
           WHERE user_id = %s AND test_passed = TRUE AND progress_counted = FALSE
       """, (user_id,))
    new_intelligence_rows = cursor.fetchall()

    for row_id, quiz_block in new_intelligence_rows:
        if quiz_block == 0:
            total_intelligence += 5
        elif quiz_block == 1:
            total_intelligence += 8
        elif quiz_block == 2:
            total_intelligence += 10

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Ü–µ–π –±–ª–æ–∫ –≤–∂–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–∏–π
        cursor.execute("""
               UPDATE user_education_progress
               SET progress_counted = TRUE
               WHERE id = %s
           """, (row_id,))

    # ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –æ–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º—É 100
    user_data["strength"] = min(user_data["strength"] + total_strength * 0.2, 100)
    user_data["speed"] = min(user_data["speed"] + total_speed * 0.2, 100)
    user_data["endurance"] = min(user_data["endurance"] + total_endurance * 0.2, 100)
    user_data["balance"] = min(user_data["balance"] + total_endurance * 0.2, 100)
    user_data["intelligence"] = min(user_data["intelligence"] + total_intelligence * 0.2, 100)

    # üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    characteristics_increased = (
            user_data["strength"] > old_strength or
            user_data["speed"] > old_speed or
            user_data["endurance"] > old_endurance or
            user_data["balance"] > old_balance or
            user_data["intelligence"] > old_intelligence
    )

    characteristics_decreased = (
            user_data["strength"] < old_strength or
            user_data["speed"] < old_speed or
            user_data["endurance"] < old_endurance or
            user_data["balance"] < old_balance or
            user_data["intelligence"] < old_intelligence
    )

    # ‚≠ê –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å–≤—ñ–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–º—ñ–Ω
    if characteristics_increased:
        user_data["experience"] = min(user_data["experience"] + 10, 200)
    elif characteristics_decreased:
        user_data["experience"] = max(user_data["experience"] - 10, 0)

    # ‚¨ÜÔ∏è –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ 100 –¥–æ—Å–≤—ñ–¥—É
    while user_data["experience"] >= 100:
        user_data["experience"] -= 100
        user_data["level"] += 1

    conn.commit()
    conn.close()

    # üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    save_user_data(user_id, user_data)


# üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def user_details_page(page, back_to_main, user_data):
    # üìä –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤–∏–≥–ª—è–¥—ñ —Ç—Ä—å–æ—Ö –∫–æ–ª–æ–Ω–æ–∫
    def render_stats_section():
        stats_section = ft.Row(
            [
                ft.Column(
                    [
                        ft.Text(f"–°–∏–ª–∞: {user_data['strength']}", size=16, color="#FFFFFF"),
                        ft.Text(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è: {user_data['balance']}", size=16, color="#FFFFFF"),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=10,
                ),
                ft.Column(
                    [
                        ft.Text(f"–Ü–Ω—Ç–µ–ª–µ–∫—Ç: {user_data['intelligence']}", size=16, color="#FFFFFF")
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=10,
                ),
                ft.Column(
                    [
                        ft.Text(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {user_data['speed']}", size=16, color="#FFFFFF"),
                        ft.Text(f"–í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {user_data['endurance']}", size=16, color="#FFFFFF"),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=10,
                ),
            ],
            alignment=ft.MainAxisAlignment.CENTER,
        )
        return stats_section

    # üéÆ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Ç–∞ –¥–æ—Å–≤—ñ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    def render_level_section():
        current_experience = user_data["experience"]
        max_experience = 100
        experience_progress = current_experience / max_experience

        return ft.Column(
            [
                ft.Text(f"üî∞ –†—ñ–≤–µ–Ω—å: {user_data['level']}", size=20, color="#FFD700", weight=ft.FontWeight.BOLD),
                ft.Container(
                    content=ft.ProgressBar(value=experience_progress, color="#FFD700"),
                    height=20,
                    border_radius=5,
                    bgcolor="#3E3E56",
                    expand=True,
                ),
                ft.Container(
                    content=ft.Text(
                        f"{current_experience}/{max_experience}",
                        size=14,
                        color="#FFFFFF",
                        text_align=ft.TextAlign.RIGHT,
                    ),
                    alignment=ft.alignment.bottom_right,
                    padding=ft.Padding(0, 2, 0, 0),
                    expand=True,
                ),
            ],
            spacing=10,
        )

    # üì• –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ç–∞ –≤—ñ–∫—É
    name_input = ft.TextField(
        label="–Ü–º'—è",
        label_style=ft.TextStyle(color="#B0B0B0"),
        value=user_data["name"],
        color="#FFFFFF",
        border_color="#FFD700"
    )
    age_input = ft.TextField(
        label="–í—ñ–∫",
        label_style=ft.TextStyle(color="#B0B0B0"),
        value=user_data["age"],
        color="#FFFFFF",
        border_color="#FFD700"
    )

    # üîô –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞–∑–∞–¥
    def on_back():
        user_data["name"] = name_input.value
        user_data["age"] = age_input.value
        save_user_data(user_data["id"], user_data)
        back_to_main()

    # üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    def update_page_content():
        updated_data = load_user_data(user_data["id"])
        user_data.update(updated_data)  # —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è

        update_characteristics(user_data["id"])  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

        updated_data = load_user_data(user_data["id"])
        user_data.update(updated_data)

        page.clean()
        page.add(
            ft.Column(
                [
                    ft.Text("–î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", size=30, color="#FFD700", weight=ft.FontWeight.BOLD),
                    name_input,
                    age_input,
                    render_level_section(),
                    ft.Divider(color="#FFD700", thickness=1),
                    render_stats_section(),
                    ft.Divider(color="#FFD700", thickness=1),
                    ft.ElevatedButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", on_click=lambda _: on_back()),
                ],
                spacing=20,
                expand=True,
            )
        )

    # üìå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    update_page_content()
