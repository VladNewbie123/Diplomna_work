import flet as ft
import json


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—á–∏—Ç—É–≤–∞–Ω–Ω—è user_data.json
def reload_user_data():
    with open("user_data.json", "r", encoding="utf-8") as file:
        return json.load(file)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –¥–æ —Ñ–∞–π–ª—É
def save_user_data(user_data, file_path='user_data.json'):
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(user_data, file, indent=4, ensure_ascii=False)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–∞ –¥–æ—Å–≤—ñ–¥—É
def update_characteristics(user_data):
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏—Ä–æ—Å—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category_to_stat = {
        '–°–∏–ª–∞': 'strength',
        '–°–∏–ª–æ–≤–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å': 'endurance',
        '–®–≤–∏–¥–∫—ñ—Å—Ç—å': 'speed',
        '–ì–Ω—É—á–∫—ñ—Å—Ç—å': 'endurance',
        '–†–æ–∑—Ç—è–∂–∫–∞': 'endurance',
        '–ö–∞—Ä–¥—ñ–æ': 'endurance',
        '–†–µ—Å–ø—ñ—Ä–∞—Ç–æ—Ä–Ω–∞ —Å–∏—Å—Ç–µ–º–∞': 'endurance'
    }

    # –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–¥—ñ–ª "exercises_prev"
    if "exercises_prev" not in user_data:
        user_data["exercises_prev"] = {}

    # –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–¥—ñ–ª "education_prev"
    if "education_prev" not in user_data:
        user_data["education_prev"] = {}

    total_experience_gain = 0  # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏—Ä—ñ—Å—Ç –¥–æ—Å–≤—ñ–¥—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä—ñ–≤–Ω—è

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ exercises
    for category, exercises in user_data.get("exercises", {}).items():
        if category in category_to_stat:
            # –Ø–∫—â–æ –≤ "exercises_prev" –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –¥–æ–¥–∞—î–º–æ —ó—ó
            if category not in user_data["exercises_prev"]:
                user_data["exercises_prev"][category] = {}

            for exercise, current_value in exercises.items():
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                prev_value = user_data["exercises_prev"][category].get(exercise, 0)

                # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ
                difference = current_value - prev_value

                # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—Ä–æ—Å–ª–æ, –∑–±—ñ–ª—å—à—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —ñ –¥–æ—Å–≤—ñ–¥
                if difference > 0:
                    stat = category_to_stat[category]
                    user_data[stat] += difference
                    total_experience_gain += 10  # –ü—Ä–∏—Ä—ñ—Å—Ç –¥–æ—Å–≤—ñ–¥—É
                # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º–µ–Ω—à–∏–ª–æ—Å—è, –∑–º–µ–Ω—à—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —ñ –¥–æ—Å–≤—ñ–¥
                elif difference < 0:
                    stat = category_to_stat[category]
                    user_data[stat] += difference  # –í—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º–µ–Ω—à–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
                    total_experience_gain += 5  # –í—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º–µ–Ω—à–∏—Ç—å –¥–æ—Å–≤—ñ–¥

                # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ "exercises_prev"
                user_data["exercises_prev"][category][exercise] = current_value

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ education
    for subject, topics in user_data.get("education", {}).items():
        if subject not in user_data["education_prev"]:
            user_data["education_prev"][subject] = {}

        for topic, current_data in topics.items():
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö
            prev_data = user_data["education_prev"][subject].get(topic, {})

            # –û—Ü—ñ–Ω–∫–∞ –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –∞–±–æ —Å—Ç–∞—Ç—É—Å—É
            prev_is_learned = prev_data.get("is_learned", False)
            current_is_learned = current_data.get("is_learned", False)

            # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–µ–º–∞ –±—É–ª–∞ —É—Å–≤–æ—î–Ω–∞)
            if current_is_learned != prev_is_learned:
                if current_is_learned:
                    # –Ø–∫—â–æ —Ç–µ–ø–µ—Ä —Ç–µ–º–∞ —É—Å–≤–æ—î–Ω–∞, –∑–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç –Ω–∞ 20
                    user_data["intelligence"] += 20
                    total_experience_gain += 10
                else:
                    # –Ø–∫—â–æ —Ç–µ–ø–µ—Ä —Ç–µ–º–∞ –Ω–µ —É—Å–≤–æ—î–Ω–∞, –∑–º–µ–Ω—à—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç –Ω–∞ 20
                    user_data["intelligence"] -= 20
                    total_experience_gain -= 10

            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ "education_prev"
            user_data["education_prev"][subject][topic] = current_data

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –∑–º—ñ–Ω
    user_data['experience'] += total_experience_gain

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    if user_data['experience'] >= 100:
        user_data['level'] += 1
        user_data['experience'] = user_data['experience'] - 100  # –ó–∞–ª–∏—à–æ–∫ –¥–æ—Å–≤—ñ–¥—É –ø—ñ—Å–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è

        # –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ 5 –ø—Ä–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—ñ —Ä—ñ–≤–Ω—è
        user_data['strength'] += 5
        user_data['speed'] += 5
        user_data['endurance'] += 5
        user_data['intelligence'] += 5

    elif user_data['experience'] < 0:
        if user_data['level'] > 1:
            user_data['level'] -= 1
            user_data['experience'] = 90  # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –¥–æ—Å–≤—ñ–¥—É –ø—ñ—Å–ª—è –ø–æ–Ω–∏–∂–µ–Ω–Ω—è
        else:
            user_data['experience'] = 0  # –ù–µ –º–µ–Ω—à–µ –Ω—É–ª—è –Ω–∞ –ø–µ—Ä—à–æ–º—É —Ä—ñ–≤–Ω—ñ

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —É —Ñ–∞–π–ª—ñ
    save_user_data(user_data)

    return user_data


def user_details_page(page, back_to_main, user_data):
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤ –¥–≤–∞ —Å—Ç–æ–≤–ø—Ü—ñ
    def render_stats_section():
        updated_data = reload_user_data()
        stats_section = ft.Row(
            [
                ft.Column(
                    [
                        ft.Text(f"–°–∏–ª–∞: {updated_data['strength']}", size=16, color="#FFFFFF"),
                        ft.Text(f"–Ü–Ω—Ç–µ–ª–µ–∫—Ç: {updated_data['intelligence']}", size=16, color="#FFFFFF"),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=10,
                ),
                ft.Column(
                    [
                        ft.Text(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {updated_data['speed']}", size=16, color="#FFFFFF"),
                        ft.Text(f"–í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {updated_data['endurance']}", size=16, color="#FFFFFF"),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=10,
                ),
            ],
            alignment=ft.MainAxisAlignment.CENTER,
        )
        return stats_section

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Ç–∞ –¥–æ—Å–≤—ñ–¥—É
    def render_level_section():
        updated_data = reload_user_data()
        current_experience = updated_data["experience"]
        max_experience = 100  # –ú–∞–∫—Å. –¥–æ—Å–≤—ñ–¥ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
        experience_progress = current_experience / max_experience

        return ft.Column(
            [
                ft.Text(f"üî∞ –†—ñ–≤–µ–Ω—å: {updated_data['level']}", size=20, color="#FFD700", weight=ft.FontWeight.BOLD),
                ft.Container(
                    content=ft.ProgressBar(value=experience_progress, color="#FFD700"),
                    height=20,
                    border_radius=5,
                    bgcolor="#3E3E56",
                    expand=True,
                ),
                ft.Container(
                    content=ft.Text(
                        f"{current_experience}/{max_experience}",
                        size=14,
                        color="#FFFFFF",
                        text_align=ft.TextAlign.RIGHT,
                    ),
                    alignment=ft.alignment.bottom_right,
                    padding=ft.Padding(0, 2, 0, 0),
                    expand=True,
                ),
            ],
            spacing=10,
        )

    name_input = ft.TextField(
        label="–Ü–º'—è",
        label_style=ft.TextStyle(color="#B0B0B0"),
        value=user_data["name"],
        color="#FFFFFF",
        border_color="#FFD700"
    )
    age_input = ft.TextField(
        label="–í—ñ–∫",
        label_style=ft.TextStyle(color="#B0B0B0"),
        value=user_data["age"],
        color="#FFFFFF",
        border_color="#FFD700"
    )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–ø—Ä–∞–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —É —Ñ–∞–π–ª—ñ
    def update_stats(e):
        updated_data = reload_user_data()

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è —Ç–∞ –≤—ñ–∫ –∑ –ø–æ–ª—ñ–≤ –≤–≤–µ–¥–µ–Ω–Ω—è
        updated_data["name"] = name_input.value
        updated_data["age"] = age_input.value

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—ñ—Å–ª—è –≤–ø—Ä–∞–≤
        updated_data = update_characteristics(updated_data)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
        save_user_data(updated_data)

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
        update_page_content()

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–º—ñ—Å—Ç—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    def update_page_content():
        page.clean()
        page.add(
            ft.Column(
                [
                    ft.Text("–î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", size=30, color="#FFD700", weight=ft.FontWeight.BOLD),
                    name_input,
                    age_input,
                    render_level_section(),  # –î–∏–Ω–∞–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞ –¥–æ—Å–≤—ñ–¥—É
                    ft.Divider(color="#FFD700", thickness=1),
                    render_stats_section(),  # –î–∏–Ω–∞–º—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    ft.Divider(color="#FFD700", thickness=1),
                    ft.ElevatedButton("–û–Ω–æ–≤–∏—Ç–∏", on_click=update_stats),  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    ft.ElevatedButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", on_click=lambda _: back_to_main()),
                ],
                spacing=20,
                expand=True,
            )
        )

    # –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    update_page_content()
